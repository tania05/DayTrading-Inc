version: '3'

services:
  webserver:
    image: 127.0.0.1:5000/webserver
    deploy:
      placement:
        constraints:
          - node.hostname != b132.seng
          - node.hostname != b136.seng
      replicas: 15
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - database0
      - database1
      - database2
      - database3
      - database4
      - database5
      - database6
      - loadbalancer
    build:
      args:
        - buildpath=webserver
      dockerfile: go-build/Dockerfile
      context: .
    extra_hosts:
      - "quoteserver:192.168.1.135"
    networks:
        - frontend
        - backend
    command: /app/bin/webserver
    ports:
     - "8000:8080"
    environment:
      - "DATABASE_COUNT=7"
      - "TRIGGER_COUNT=1"

  trigger0: &trigger
    deploy:
      placement:
        constraints:
          - node.hostname != b132.seng
          - node.hostname != b136.seng
    
    image: 127.0.0.1:5000/trigger
    depends_on:
      - redis
      - database0
      - database1
      - database2
      - database3
      - database4
      - database5
      - database6
    build:
      args:
        - buildpath=trigger
      dockerfile: go-build/Dockerfile
      context: .
    extra_hosts:
      - "quoteserver:192.168.1.135"
    networks:
      - frontend
      - backend
    command: /app/bin/trigger
    environment:
      - "DATABASE_COUNT=3"
    ports: []

  redis:
    image: redis:4.0.8-alpine
    deploy:
      placement:
        constraints:
          - node.hostname != b132.seng
          - node.hostname != b136.seng
    ports:
     - "6379:6379"
    networks:
      - backend

  auditserver: 
    image: 127.0.0.1:5000/auditserver
    build:
      args:
        - buildpath=auditserver
      dockerfile: go-build/Dockerfile
      context: .
    networks:
      - backend
    command: /app/bin/auditserver
    ports: []

  database0: &database
    image: 127.0.0.1:5000/database
    deploy:
      placement:
        constraints:
          - node.hostname != b132.seng
          - node.hostname != b136.seng
    environment:
      restart: always
    networks:
     - backend
    build:
      context: database
      dockerfile: Dockerfile

  database1:
    <<: *database
  database2:
    <<: *database
  database3:
    <<: *database
  database4:
    <<: *database
  database5:
    <<: *database
  database6:
    <<: *database  

  loadbalancer:
    image: 127.0.0.1:5000/loadbalancer
    deploy:
      placement:
        constraints:
          - node.hostname != b132.seng
          - node.hostname != b136.seng
    build:
      args:
        - buildpath=load-balancer
      dockerfile: go/Dockerfile
      context: .
    networks:
        - frontend
    command: /app/bin/load-balancer
    ports:
      - 5555:5555

networks:
    frontend:
    backend:
        internal: true
